name: BDT

on:
  - push

jobs:
  golangci-lint:
    runs-on: ubuntu-latest
    container: golangci/golangci-lint:v1.23.8-alpine
    steps:
      - uses: actions/checkout@v2
      - run: GOGC=20 golangci-lint run --timeout 10m

  nancy-test:
    runs-on: ubuntu-latest
    container: sonatypecommunity/nancy:v0-alpine
    steps:
      - uses: actions/checkout@v2
      # exclude hashicorp/consul vulnerabilities because we don't use it (referenced by old viper)
      - run: nancy -quiet -exclude-vulnerability fc041c7e-0c64-4b74-991e-64196a704ace,2bfd5f1a-e9b5-4a04-b4e8-15091e145845

  goreleaser-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.14
      - name: Check for GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: v0.138.0
          args: check

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [1.14.x]
        node: [12.x]
    services:
      postgres:
        image: postgres:9.6
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: postgres
        ports:
          - 5432/tcp
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: test
        ports:
          - 3306/tcp
      cockroachdb:
        image: cockroachdb/cockroach:v2.1.6
        env:
          COCKROACH_INSECURE: true
        ports:
          - 26257/tcp
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ matrix.node }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.node }}-node-
      - uses: actions/cache@v2
        with:
          path: .bin
          key: ${{ runner.os }}-bin-${{ hashFiles('Makefile') }}
          restore-keys: ${{ runner.os }}-bin-
      - run: go mod download
      - run: make deps
      - run: .bin/go-acc -o coverage.txt ./... -- -failfast -timeout=5m
        env:
          TEST_DATABASE_POSTGRESQL: postgres://test:test@localhost:${{ job.services.postgres.ports[5432] }}/postgres?sslmode=disable
          TEST_DATABASE_MYSQL: mysql://root:test@(localhost:${{ job.services.mysql.ports[3306] }})/mysql?parseTime=true&multiStatements=true
          TEST_DATABASE_COCKROACHDB: cockroach://root@localhost:${{ job.services.cockroachdb.ports[26257] }}/defaultdb?sslmode=disable

      #      Running race conditions requires parallel tests, otherwise it's worthless (which is the case)
      #      - run: go test -race -short $(go list ./... | grep -v cmd)
      - run: test -z "${{ github.event.pull_request.number }}" && goveralls -service=circle-ci -coverprofile=coverage.txt -repotoken=$COVERALLS_REPO_TOKEN || echo "forks are not allowed to push to coveralls"
      - run: make docker

  test-e2e-memory:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        go: [1.14.x]
        node: [12.x]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - run: go mod download
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - uses: actions/cache@v2
        id: root-npm
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-${{ matrix.node }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.node }}-node-
      - run: npm ci
      - uses: actions/cache@v2
        id: oauth2-client-npm
        with:
          path: |
            ~/.npm
            ~/.cache
            test/e2e/oauth2-client/node_modules
          key: ${{ runner.os }}-${{ matrix.node }}-node-oauth2-client-${{ hashFiles('test/e2e/oauth2-client/package-lock.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.node }}-node-oauth2-client-
      - run: npm ci
        working-directory: test/e2e/oauth2-client
      - run: ./test/e2e/circle-ci.bash memory
      - run: ./test/e2e/circle-ci.bash memory-jwt

  test-e2e-postgres:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        go: [1.14.x]
        node: [12.x]
    services:
      postgres:
        image: postgres:9.6
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: postgres
        ports:
          - 5432/tcp
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - run: go mod download
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - uses: actions/cache@v2
        id: root-npm
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-${{ matrix.node }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.node }}-node-
      - run: npm ci
      - uses: actions/cache@v2
        id: oauth2-client-npm
        with:
          path: |
            ~/.npm
            ~/.cache
            test/e2e/oauth2-client/node_modules
          key: ${{ runner.os }}-${{ matrix.node }}-node-oauth2-client-${{ hashFiles('test/e2e/oauth2-client/package-lock.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.node }}-node-oauth2-client-
      - run: npm ci
        working-directory: test/e2e/oauth2-client
      - run: echo "::set-env name=TEST_DATABASE_POSTGRESQL::postgres://test:test@localhost:${{ job.services.postgres.ports[5432] }}/postgres?sslmode=disable"
      - run: ./test/e2e/circle-ci.bash postgres
      - run: ./test/e2e/circle-ci.bash postgres-jwt

  test-e2e-mysql:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        go: [1.14.x]
        node: [12.x]
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: test
        ports:
          - 3306/tcp
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - run: go mod download
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - uses: actions/cache@v2
        id: root-npm
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-${{ matrix.node }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.node }}-node-
      - run: npm ci
      - uses: actions/cache@v2
        id: oauth2-client-npm
        with:
          path: |
            ~/.npm
            ~/.cache
            test/e2e/oauth2-client/node_modules
          key: ${{ runner.os }}-${{ matrix.node }}-node-oauth2-client-${{ hashFiles('test/e2e/oauth2-client/package-lock.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.node }}-node-oauth2-client-
      - run: npm ci
        working-directory: test/e2e/oauth2-client
      - run: echo "::set-env name=TEST_DATABASE_MYSQL::mysql://root:test@(localhost:${{ job.services.mysql.ports[3306] }})/mysql?parseTime=true&multiStatements=true"
      - run: ./test/e2e/circle-ci.bash mysql
      - run: ./test/e2e/circle-ci.bash mysql-jwt

  test-e2e-cockroach:
    runs-on: ubuntu-latest
    steps:
      - run: exit 0

  test-e2e-plugin:
    runs-on: ubuntu-latest
    steps:
      - run: exit 0

  sdk-generate:
    needs:
      - golangci-lint
      - nancy-test
      - test
      - goreleaser-test
      - test-e2e-memory
      - test-e2e-postgres
      - test-e2e-mysql
      - test-e2e-cockroach
      - test-e2e-plugin
    runs-on: ubuntu-latest
    steps:
      - run: exit 0
